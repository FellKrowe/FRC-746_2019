// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc886.FallFiesta886;

import org.usfirst.frc886.FallFiesta886.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc886.FallFiesta886.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driver;
    public JoystickButton creepForward;
    public JoystickButton creepBackward;
    public JoystickButton creepLeft;
    public JoystickButton creepRight;
    public JoystickButton extendArm;
    public JoystickButton retractArm;
    public JoystickButton climbUp;
    public JoystickButton climbDown;
    public JoystickButton climbMotor;
    public JoystickButton raiseHatch;
    public JoystickButton lowerHatch;
    public Joystick operator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operator = new Joystick(1);
        
        lowerHatch = new JoystickButton(operator, 4);
        lowerHatch.whileHeld(new op_lowerArm());
        raiseHatch = new JoystickButton(operator, 2);
        raiseHatch.whileHeld(new op_raiseArm());
        extendArm = new JoystickButton(operator, 6);
        extendArm.whenPressed(new op_Extend());
        retractArm = new JoystickButton(operator, 8);
        retractArm.whenPressed(new op_Retract());        
        climbUp = new JoystickButton(operator, 5);
        climbUp.whileHeld(new op_climbUp());
        climbDown = new JoystickButton(operator, 7);
        climbDown.whenPressed(new op_climbDown());
        
        
        driver = new Joystick(0);       
        climbMotor = new JoystickButton (driver, 10);
        climbMotor.whileHeld(new dr_climbMotor());        
        creepForward = new JoystickButton (driver, 2);
        creepForward.whileHeld(new dr_creepDrive(-.4,-.4));
        creepBackward = new JoystickButton (driver, 4);
        creepBackward.whileHeld(new dr_creepDrive(.4,.4));
        creepLeft = new JoystickButton (driver, 1);
        creepLeft.whileHeld(new dr_creepDrive(-.55,.55));
        creepRight = new JoystickButton (driver, 3);
        creepRight.whileHeld(new dr_creepDrive(.55,-.55));


        // SmartDashboard Buttons
        /*******************************************************************
        SmartDashboard.putData("arcadeDrive", new arcadeDrive());
        SmartDashboard.putData("op_Intake", new op_Intake());
        SmartDashboard.putData("op_Eject", new op_Eject());
        SmartDashboard.putData("op_Extend", new op_Extend());
        SmartDashboard.putData("op_Retract", new op_Retract());
        SmartDashboard.putData("op_raiseArm", new op_raiseArm());
        SmartDashboard.putData("op_lowerArm", new op_lowerArm());
        SmartDashboard.putData("op_rotateLeft", new op_rotateLeft());
        SmartDashboard.putData("op_rotateRight", new op_rotateRight());
        SmartDashboard.putData("dr_turn", new dr_turn());
        SmartDashboard.putData("au_driveStraight", new au_driveStraight());
        SmartDashboard.putData("au_turnRobot", new au_turnRobot());
        SmartDashboard.putData("au_doNothing", new au_doNothing());
        SmartDashboard.putData("au_raiseArm", new au_raiseArm());
        SmartDashboard.putData("au_retractArm", new au_retractArm());
		*******************************************************************/
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getOperator() {
        return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

