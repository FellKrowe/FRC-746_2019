// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc886.FallFiesta886;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


import org.usfirst.frc886.FallFiesta886.commands.*;
import org.usfirst.frc886.FallFiesta886.subsystems.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<String> chooser = new SendableChooser<>();

    public static OI oi;
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static Arm arm;
    UsbCamera cam1;
    UsbCamera cam2;
    
    final String AutoLeftRed = "Auto Left Switch";
    final String AutoMiddleRed = "Middle Switch";
    final String AutoRightRed = "Auto Right Switch";
    final String AutoStraight = "Auto Straight";
    final String AutoDelayStraight = "Delayed Straight";
    final String AutoLeftMid = "Middle Left Straight";
    final String AutoRightMid = "Middle Right Straight";
    final String autoLeftSide = "Left Habitat";
    final String autoRightSide = "Right Habitat";
    final String autoMiddleLeft = "Middle Left Hatch";
    final String autoMiddleRight = "Middle Right Hatch";
    final String teleOp = "TeleOP Start";


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        cam1 = CameraServer.getInstance().startAutomaticCapture();
        cam2 = CameraServer.getInstance().startAutomaticCapture();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        intake = new Intake();
        arm = new Arm();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
         
	      chooser.addDefault("TeleOP Start", teleOp);
	      chooser.addObject("Delayed Straight", AutoDelayStraight);	      
          chooser.addObject("Left Habitat", autoLeftSide);
          chooser.addObject("Right Habitat", autoRightSide);
          chooser.addObject("Middle Left Hatch", autoMiddleLeft);
          chooser.addObject("Middle Right Hatch", autoMiddleLeft);
          


	      SmartDashboard.putData("Auto mode", chooser);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
        Robot.driveTrain.stop();
        Robot.arm.cStop();
        Robot.intake.stop();
        Robot.intake.setCompressor(false);
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {    	
    	String autoSelected = chooser.getSelected();
        System.out.println("Auto selected: " + autoSelected);
		switch (autoSelected) {	
        
        default: 
                    autonomousCommand = new au_doNothing(0.1);
                    break;    

        case teleOp: 
                    autonomousCommand = new au_doNothing(0.1);
                    break;   
            
		case AutoStraight:
		            autonomousCommand = new au_AutoStraight();
			        break;
			
		case autoLeftSide:
					autonomousCommand = new au_AutoLeftHab();
					break;

		case autoRightSide:			
					autonomousCommand = new au_AutoRightRed();
					break;
						
		case autoMiddleLeft:
					autonomousCommand = new au_AutoMiddleLeft();
                    break;
        case autoMiddleRight:
					autonomousCommand = new au_AutoMiddleLeft();
					break;
			
		case AutoDelayStraight:
			autonomousCommand = new au_AutoDelayMove();
            break;
            
		

			
			
		}
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
    	Robot.intake.setCompressor(true);
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        SmartDashboard.putNumber("Pressure reading: ", Robot.intake.getAirPressurePsi());
        Scheduler.getInstance().run();
    }
}
