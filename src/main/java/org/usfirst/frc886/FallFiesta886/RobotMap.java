// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc886.FallFiesta886;

import edu.wpi.first.wpilibj.AnalogInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftMotor;
    public static SpeedController driveTrainrightMotor;
    public static DifferentialDrive driveTrainDifferentialDrive1;
    public static DoubleSolenoid intakeintakeCyl;
    public static DoubleSolenoid climbCyl;
    public static Compressor intakeCompressor1;
    public static SpeedController intakeleftIntake;
    public static SpeedController intakerightIntake;
    public static SpeedController armarmMotor;
    public static SpeedController climbMotor;
    public static AnalogInput pressureSensor;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainleftMotor = new Talon(0);
        //LiveWindow.addActuator("DriveTrain", "leftMotor", (Talon) driveTrainleftMotor);
        driveTrainleftMotor.setInverted(false);
        driveTrainrightMotor = new Talon(1);
        //LiveWindow.addActuator("DriveTrain", "rightMotor", (Talon) driveTrainrightMotor);
        driveTrainrightMotor.setInverted(false);
        driveTrainDifferentialDrive1 = new DifferentialDrive(driveTrainleftMotor, driveTrainrightMotor);
        //LiveWindow.addActuator("DriveTrain", "Differential Drive 1", driveTrainDifferentialDrive1);
        driveTrainDifferentialDrive1.setSafetyEnabled(true);
        driveTrainDifferentialDrive1.setExpiration(0.1);
        driveTrainDifferentialDrive1.setMaxOutput(0.75);

        intakeintakeCyl = new DoubleSolenoid(0, 0, 1);
        //LiveWindow.addActuator("Intake", "intakeCyl", intakeintakeCyl);
        climbCyl = new DoubleSolenoid(0,2,3);
        
        intakeCompressor1 = new Compressor(0);
        //LiveWindow.addActuator("Intake", "Compressor 1", intakeCompressor1);
        pressureSensor = new AnalogInput(0);
        intakeleftIntake = new Talon(2);
        //LiveWindow.addActuator("Intake", "leftIntake", (Spark) intakeleftIntake);
        intakeleftIntake.setInverted(false);
        intakerightIntake = new Talon(3);
        //LiveWindow.addActuator("Intake", "rightIntake", (Spark) intakerightIntake);
        intakerightIntake.setInverted(false);
        armarmMotor = new Talon(5);
        //LiveWindow.addActuator("Arm", "armMotor", (Talon) armarmMotor);
        armarmMotor.setInverted(false);
        
        climbMotor = new Talon(4);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
