// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc886.FallFiesta886.subsystems;


import org.usfirst.frc886.FallFiesta886.RobotMap;
import org.usfirst.frc886.FallFiesta886.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor = RobotMap.driveTrainleftMotor;
    private final SpeedController rightMotor = RobotMap.driveTrainrightMotor;
    private final DifferentialDrive differentialDrive1 = RobotMap.driveTrainDifferentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
    	setDefaultCommand(new arcadeDrive());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
	public void stop() {
		differentialDrive1.curvatureDrive(0, 0, false);
	}
	
	public void getArcadeDrive(double throttle, double twist, boolean squared) {
		differentialDrive1.arcadeDrive(throttle, twist, true);
	}
	
	public void ArcadeDrive(Joystick driver) {
		getArcadeDrive(-driver.getY(), driver.getX(), true);
	}

	public void curvatureDrive(double throttle, double turn, boolean quickTurn) {
		differentialDrive1.curvatureDrive(throttle,turn, quickTurn);

	}
	
	public void setTankDrive(double leftSide, double rightSide, boolean squared) {
		differentialDrive1.tankDrive(leftSide, rightSide, squared);
	}
		

	public void drive(Joystick driver) {
		getArcadeDrive(-driver.getAxis(AxisType.kThrottle), -driver.getAxis(AxisType.kTwist) , true);
	}
	
}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.



