// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc886.FallFiesta886.subsystems;

import org.usfirst.frc886.FallFiesta886.RobotMap;
import org.usfirst.frc886.FallFiesta886.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.AnalogInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid intakeCyl = RobotMap.intakeintakeCyl;
    private final DoubleSolenoid climbCyl = RobotMap.climbCyl;
    private final Compressor compressor1 = RobotMap.intakeCompressor1;
    private final SpeedController leftIntake = RobotMap.intakeleftIntake;
    private final SpeedController rightIntake = RobotMap.intakerightIntake;
	private final AnalogInput pressureSensor = RobotMap.pressureSensor;
	double reading;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    


public void stop() {
	leftIntake.set(0);
	rightIntake.set(0);
}

public void leftIntakeMotor(double speed) {
	if (speed > 1 || speed < -1) {
		System.out.println("Warning, unsafe intake speed!");
		   	}
	else {
		leftIntake.set(speed);
	}
}
	
	public void rightIntakeMotor(double speed) {
    	if (speed > 1 || speed < -1) {
    		System.out.println("Warning, unsafe intake speed!");
    		   	}
    	else {
    		rightIntake.set(speed);
    	}
}
	
	public void setCompressor(boolean isOn) {
		if (isOn == true) {
			compressor1.start();
		} else {
			compressor1.stop();
		}
	}

	public void setFrontCylinder(boolean isForward) {
		if (isForward == true) {
			intakeCyl.set(DoubleSolenoid.Value.kForward);
		} else {
			intakeCyl.set(DoubleSolenoid.Value.kReverse);

		}
	}
		
	public void setClimbCyl(boolean isForward) {
		if (isForward == true) {
			climbCyl.set(DoubleSolenoid.Value.kForward);
		} else {
			climbCyl.set(DoubleSolenoid.Value.kReverse);
		}
	}	

	public double getAirPressurePsi() {
		return 250.0 * pressureSensor.getVoltage() / 5.0 - 27.25;
	} 

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

